{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","dformat","setdformat","console","log","nameList","names","className","htmlFor","class","type","id","checked","onChange","map","variant","idx","format","ticking","timezone","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b8f81bed.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport Clock from \"react-live-clock\";\r\nimport \"./main.scss\";\r\n\r\nfunction App() {\r\n  const [dformat, setdformat] = useState(true);\r\n  console.log(dformat);\r\n  var nameList = {\r\n    names: [\r\n      [\"EulerTour\", \"America/Santa_Isabel\"],\r\n      [\"paradox\", \"America/Santa_Isabel\"],\r\n      [\"TheQuarantinedSpy\", \"America/Santa_Isabel\"],\r\n      [\"YoshiAsk\", \"America/Chicago\"],\r\n      [\"leotrs\", \"America/Blanc-Sablon\"],\r\n      [\"ðŸ”¥PgSuperðŸ”¥\", \"America/Sao_Paulo\"],\r\n      [\"Aathish04\", \"Asia/Kolkata\"],\r\n      [\"kilacoda\", \"Asia/Kolkata\"],\r\n      [\"naveen521kk\",\"Asia/Kolkata\"],\r\n      [\"cobordism\",\"Europe/Amsterdam\"],\r\n      [\"huguesdvmx\", \"Europe/Paris\"],\r\n      [\"XorUnison\", \"Europe/Paris\"],\r\n      [\"kolibril13\", \"Europe/Paris\"],\r\n      [\"behackl\",\"Europe/Vienna\"],\r\n      [\"philippimhof\",\"Europe/Zurich\"]\r\n    ],\r\n  };\r\n  //true for 24 hour format and false for AM/Pm format\r\n  function ampmbutton() {\r\n    //if (dformat === \"ampm\") {\r\n    if (dformat === true) {\r\n      setdformat((dformat) => (dformat = false));\r\n    } else {\r\n      setdformat((dformat) => (dformat = true));\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container-xl\">\r\n      <h1 className=\"secondary\">\r\n        <u>Manim Community Members TimeZones</u>\r\n      </h1>\r\n      <div className=\"main-clock container\">\r\n        <div className=\"labelswitch\">\r\n          <label htmlFor=\"ampmswitch\" className=\"labelswitch\">\r\n            AM/PM\r\n          </label>\r\n          <label class=\"switch\">\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"ampmswitch\"\r\n              checked={dformat}\r\n              onChange={ampmbutton}\r\n            />\r\n            <span className=\"slider round\"></span>\r\n          </label>\r\n          <label htmlFor=\"ampmswitch\" className=\"labelswitch\">\r\n            24-hour\r\n          </label>\r\n        </div>\r\n        {dformat === false &&\r\n          nameList.names.map((variant, idx) => (\r\n            <div>\r\n              <b>{variant[0]}</b> :{\" \"}\r\n              <Clock\r\n                format={\"hh:mm:ss A (dddd)\"}\r\n                ticking={true}\r\n                timezone={variant[1]}\r\n              />\r\n            </div>\r\n          ))}\r\n        {dformat === true &&\r\n          nameList.names.map((variant, idx) => (\r\n            <div key={idx}>\r\n              <b>{variant[0]}</b> :{\" \"}\r\n              <Clock\r\n                format={\"HH:mm:ss (dddd)\"}\r\n                ticking={true}\r\n                timezone={variant[1]}\r\n              />\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}